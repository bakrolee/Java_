
	#.Notepad++ 사용법


1. NppExec
: 명령어를 만들어 쉽게 실행시킬 수 있는 플러그인

1-1. 명령어 생성하기
플러그인 메뉴 -> 플러그인 관리 -> '사용가능' 탭 선택 -> nppexec 검색 후 설치
-> NppExec -> Execute NppExec Script -> <temporary script> 선택 (좌하단 박스 안에)

-> Compile 단축키 생성 : 아래의 내용을 큰 흰 박스에 작성 후 save로 이름 'Compile'으로 저장하면 됨.
cd "$(CURRENT_DIRECTORY)"
javac -encoding utf-8 $(FILE_NAME)

-> Run 단축키 생성
cd "$(CURRENT_DIRECTORY)"   : 내가 현재 작업하고 있는 파일위치로 경로 이동시켜줌
java $(NAME_PART)           : 내가 작업하고 있는 파일 이름에서 확장자를 제거하고 이만큼을 입력해서 자바 실행시켜줌


1-2. 실행 및 확인
'메크로' 메뉴 선택 -> 아까 만들어둔 명령어 있는지 확인
-> 없으면 플러그인 메뉴 -> NppExec -> Advanced Options... 
-> Menu items 밑, 좌측 상단의 박스 체크되어있는지 확인, Place to the Macros submenu
-> 체크하고 노트패드 종료 후 재실행


1-3. 단축키 변경
설정 메뉴 -> 단축키 설정 -> 플러그인 명렁어 탭 
-> 목록 중에서 내가 입력한 명령어 찾아서, 단축키 modify하면 됨


1-4. no internal messages 
: 플러그인 메뉴 -> nppexec -> no internal messages 체크
: 이거 하면 콘솔창에 이상한 메세지(과정 설명임)들 안 뜨게 됨 



2. 기본 세팅
2-1. 문서 설정
메뉴에서 '설정' -> 환경설정 -> 새문서 -> 기본언어 : java, 인코딩 utf-8 

2-2. 글꼴 설정
메뉴에서 '설정' -> 형식설정 -> '형식:' 목록에서 Default Style 선택 (위에서 2번째 있음)  
-> 글꼴 : Consolas 선택


3. notepad++ 단축키
- ctrl + shift + L   << 한줄 지우기
- ctrl + k           << 주석 



	#. 입력
1. 프로그래밍 과정
: 입력 -> 연산 -> 출력

2. type 과 이름
eg. 
   int x   (int = type / x = 이름)
   Scanner input   Scanner = type / input = 이름)


3. Scanner
: 사용자의 입력을 받을 수 있는 기능들을 모아놓은 '클래스'
  사용자가 입력한 값을 가져 옴.

- 사용법
: 제일 위에 'import java.util.Scanner;' 작성
  java.util  << 패키지
                그 안의 Scanner를 쓰겠다는 뜻

- 주의사항
: nextInt에서 사용자가 실수를 입력시 에러로 꺼짐.
: nextDouble에서는 사용자가 정수 입력해도 처리 가능함. (이유는 정수도 .0으로 처리가능하니깐)


4. 한 문장에서 변수 선언과 초기화를 같이 할 수 있다.
eg.
   Scanner input;
   input = new Scanner(System.in);
-> Scanner input = new Scanner(System.in);
  
5. 인스턴스
eg.   new Scanner(System.in) = 새로운 인스턴스 만들어 내는 것
- 인스턴스란?
: 클래스는 자바 코드
  이 코드로 된 것을 우리 컴퓨터 세상의 실제 객체로 만들어 내야함 = 인스턴스
  (클래스 = 설계도 / 인스턴스 = 설계도로 만든 건물)


6. 리터럴 상수
: 변하지 않는 값. 
  언제나 변하지 않는 결과를 나타냄.
eg.
   System.out.println(44 + 17);   -> 61
   리터럴 상수 = 44, 17

6-1. 변수
- 상수의 단점 : 값을 변경해야 할 때 굉장히 불편함.
- 이것을 보안하기 위해 나온 게 '변수'

6-2. 입력
- 사용자는 이러한 코드를 수정하는 것이 불가능.
  사용자를 위해 나온 것이 '입력'


7. 라이브러리
- 찾아서 사용한다는 뜻 // 엄청나게 많아서 외울 수 없음ㅋ
- eg. Scanner


8. 연산자 나누기
- 몫을 구하기 : /
- 나머지를 구하기 : %

- % 활용법
: 결과값이 0일 때 왼쪽의 수가 오른쪽의 수의 배수임을 확인할 수 있다.
eg. 1%2 = 1 / 2%4 = 0   -> 짝수임을 확인함.


9. 스
