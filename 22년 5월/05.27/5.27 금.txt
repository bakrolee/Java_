	#.

1. 상수
- 의의
: 항상 변하지 않는 수.

- 사용법
: 변수 선언과 똑같은데 앞에 final을 붙여줌. 
  eg. final int MY_NUMBER = 22;

- name
: 전부 대문자로 지음. (변수(=소문자)와 차이점을 나타내기 위해서)
: 띄어쓰기 자리에 '_'를 사용.

- 변수와 차이점
: 값을 변화시키려고 하면 compile error 발생.
: 최초 값 설정한 이후 다른 값을 지정하려고 해도 compile error.

- 변수와 공통점
: 상수라도 지역 안에서 선언했을 시 해당 지역을 벗어나면 사라짐.


2. 전역변수
- 의의
: 어느 영역에서도 사용할 수 있음. 
: 어디서도 접근 가능하고, 변화를 줄 수 있다.

- 단점
: 어디서도 접근, 수정가능하기때문에 변동성이 너무 많아서 굉장히 사용하기 꺼려진다.

- How to?(해결)
: 상수로 사용하게 되면 위의 단점을 해소가 가능함.
: 고로 최대한 적게 사용하되 


<이론>
3. static, method, public

클래스 안에는 멤버라는 게 존재할 수 있음.
멤버 안에 필드, 메소드, 등...

메소드 앞에는 static이라는 키워드가 붙어있음.
뜻 : 전역, 정적
클래스의 객체 표현과는 다르게 존재하는 녀석들
-> static이 붙은 얘들은 클래스 이름으로 호출이 가능함.

변수 앞에 static이라는 키워드를 붙여주게 되면
어디에서도 해당 변수에 접근할 수 있게 된다.


public 
: 해당 클래스를 넘어서 다른 클래스에서도 사용할 수 있게 됨
: 외부에서 클래스 이름과 변수이름으로 접근을 하면 값을 볼 수 있게 됨.


이처럼 자바 개발진이 Math라는 클래스를 만들어 놓고 
그 안에 메소드들과 변수를 만들어 놨음.
public class Math {
  public static final double PI(double 3.141592...);

  public static ~~
  .
  .
  .
}

이렇게 만들어 둔 상수, 메소드 등을 불러올 수 있게 됨.
eg.
->  Math.PI;
(클래스이름. 상수이름)


4. 객체지향
- 객체지향이란?
: 세상에 있는 모든 것을 객체로 보는 시선에서 시작함.
: 모든 현실의 객체(object) - 물질, 생각, 등... 

- 객체란?
: 상태와 동작을 가지고 있다.

- 객체지향 프로그래밍?
현실 객체 -> 코드화 -> (코드를 기반으로) 가상세계 객체 만듬 -> 객체들간에 메세지를 주고 받으며 프로그램의 흐름을 만들어 내는 방식 

eg. 강아지
  1) 강아지의 특징 중 필요로 한 것을 코드화
  2) 그 코드를 기반으로 가상의 세계에서 강아지를 만들어 냄. (가상세계의 강아지)
  3) 이런 강아지들을 여러 개 만들어 냄. (객체의 형태로)
  4) 그러한 객체들끼리 상호 소통을 하게 함 (메세지 주고 받음)


4.1 값/상태 -> 멤버변수(member variable) / 필드(fields)
: 값으로 나타낼 수 있는 것을 상태라고 한다.
: 클래스 안에서 변수의 형태로 표현할 수 있음.
: 이름과 데이터 타입을 정해서 나열하면 됨.
: 상태 -> 멤버변수(member variable) / 필드(fields)로 나타낼 수 있음.

4.1.2 필드
: 필드는 클래스 범위 전체 안에서 사용할 수 있는 특징있음 
  -> 고로 (클래스 안에 있는) 메소드 안에서도 사용 가능.

4.2 기능 or 동작



5. 참조형 변수
- 참조형 변수는 null(없음)을 참조할 수 있다.
  eg. Box none = null;
- 뜻 : 지금 참조하고 있는 것이 없다

- 주의
: 참조형 변수를 사용할 때는 언제나 실행이 제대로 작동되는지 확인해줘야 함.
  (컴파일은 되는데 실행에서 에러 뜨는 경우도 종종)


6. 인스턴스화 (=객체 생성)
- 뜻 
: 새로운 공간을 만든다고 생각하면 됨
: 새로운 객체를 생성하게 됨.

- 생성
: new 클래스이름();
: new가 꼭 붙어야함!!! 


7. 인수(argument)와 파라미터
eg. 
// 메소드
  method1 (int param = 파라미터) {}
// 메소드 호출
  method(109 = 인수);

: 인수와 파라미터는 값이 결국 똑같아지기 때문에 
  개발자들은 둘 개념을 굳이 구분 안함. 그게 그거라 봄.










