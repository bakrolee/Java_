06.15

	#.
1. Object 클래스
- 자바에서 최상단에 존재하는 클래스
 : 그동안 생략되어 있었음. (일반적으로 만든 클래스들은 다 Object 클래스를 부모로 삼고 있음)
 : 그래서 생성자 만들 때 super();가 같이 만들어진거.

	#.
1. 추상 메소드
- 사례
  : eg. 도형이라는 부모 클래스에서 넓이 구하는 메소드를 만들고자 함. but 문제 발생.
        도형의 넓이를 구할 수 있는데, 추상적이기 때문에 직접 넓이를 못 구하고, 원 삼각형 등 구체적일 때만 넓이글 구할 수 있음.
- 해결책
  : abstract 키워드를 리턴type 앞에 붙여두면 됨.
- 형태 
  : 메소드 Body 없고, Head만 존재
    eg. public abstract int getArea();
- 특징
  : 추상 메소드는 일반적인 클래스에는 존재할 수 없음. (이유: 일반 클래스는 인스턴스화 해서 객체로서 메소드를 사용할 수 있는데, 추상클래스는 내용이 없으므로 미완 -> 오류)
  : 추상 클래스에만 존재할 수 있다. (class 앞에 abstract 붙임)
    eg. public abstract class Shape
  : 부모의 추상메소드를 자식이 구체화 시켜줘야 할 의무가 있다.

2. 추상클래스
- 특징
  : 인스턴스화 할 수 없다. (이유: 미완의 클래스기 때문)


	#.
1. 상속 종단클래스
- 의의
: 더 이상 자식 클래스를 만들지 못하게 함. (종단 클래스가 마지막 상속자) 

- 사용법
: 클래스 앞에 final 붙이면 됨.
  eg. public final class ~~


	#. 인터페이스
1. 특징
- 필드가 없음.
- 추상메소드'만' 가질 수 있음. (abstract 생략 가능)
- 접근제한자 안 적어도 무조건 public (public 생략 가능)

- 인터페이스는 인스턴스화 할 수 없다.
  (다만 만들어진 다른 인스턴스들을 참조할 수는 있음)

2. 구현
- implements 키워드로 상속 클래스 우측에다 작성
  eg. class Eagle extends Bird implements Flyable {}  
     : 독수리는 날 수 있는 새다.

3. 배열로 사용 가능하다.

4. 인터페이스는 상속이 가능하다.

5. 제네릭
- 인터페이스 이름 우측에 <> 표시
- 제네릭 안에 내가 비교할 타입 넣으면 됨.

6. Comparable 
- 얘를 쓸 때 위의 제네릭으로 비교 대상 정해두면 됨.
- 얘를 써야 Arrays.sort를 써서 배열에 담아서 쉽게 정렬 가능함.





