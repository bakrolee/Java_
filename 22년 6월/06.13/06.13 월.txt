6.13 월

	#. 상속
1. 
클래스를 만들다보면 둘 다 사람일 경우,
- 사람이라는 점에 있어서 공통적인 특징을 가지게 됨. ex. 이름, 나이
  (물론 각각 분류에 따라 차이점도 동시에 가지고 있게 됨.)
-> 그러다보면 이름, 나이를 알려주는 메소드(동작)와 같은 부분이 중복됨.

- 해결법
 : '사람'이라는 공통적인 특징을 뽑아내서 사람이라면 갖게되는 부분을 작성해두고
   작성한 특징을 상속하게 해주면 중복되는 코드를 조금 줄일 수 있다.


2. is-a 관계
- "자식은 부모이다"라는 말이 되어야 함.
- has-a 관계는 상속구조가 아님.
eg. 도서관은 책을 가지고 있다. 책은 도서관이다.(말이 안됨)


3. 자식 클래스
- 부모의 특징을 물려받아서 쓰려면 부모의 생성자를 불러와서 초기화해야 함.
eg. 
   public Student(String name, int age, int score) {
	super(name, age);
	this.score = score;
- super는 언제나 생성자의 첫문장이어야 함!
- 결과
  : 부모의 생성자를 거친 필드값을 자식이 가지게 된다.


4. 접근제한자 protected
- 같은 패키지(폴더)에 있는 객체와 상속관계의 객체들만 허용
- 부모 필드가 private이라면 자식이 접근 불가능하지만 (3번의 방법 사용하거나...)
  protected이라면 자식이 자기 필드처럼 접근, 사용 가능함.


5. 주의사항
- (중요) 수퍼클래스를 변경하면 상속되는 클래스들도 다 영향을 받는다!


	#. 메소드 오버라이드(override)
1. 메소드 오버라이드(override)
- 부모의 메소드 헤더부분을 그대로 적은 후 (자식클래스에서)
  자식 클래스에서 메소드의 바디부분을 그 자식에 맞게 작성함.

2. annotation
- @Override
  : 오버라이드 하려고 했을 때 메소드 이름을 오타냈을 때, 타이핑 오류를 잡아내줄 수 있음.
   (메소드 위에 작성하면 됨)
  : 실수 방지용! 무조건 사용하기!


	#. 클래스 다이어그램 그리기
1. amateras modeler 설치
- 구글에 검색 -> 이클립스에 help -> new install -> 설치

2. attribute = 필드









