	#. 메소드
0. 형식
public static 리턴타입 메소드이름(파라미터(입력값: 개수, 타입, 순서)) 

1. 메소드란?
: 문장에 이름을 붙이고
  이름을 붙여둔 메소드를 호출만하면 실행하게 됨
  -> 쉽게 말해 코드를 간결화하기 위해서 & 편리성때문에 사용

eg.
  public static void printRepeat() { -> 메소드 머리(head)
 				     -> printRepeat = 이름
  < 메소드 몸통(body) : 중괄호 안 내용 >
     
  }


2. 특이사항
- 메소드는 class 안에 있어야 한다.
  : 메소드를 class 밖에 두면 컴파일 에러남!
- 메소드는 여러 개 있을 수 있다. 
- 메소드는 몸통이 비워져 있어도 컴파일 에러 안 남.


3. 메소드 이름
- 영소문자로 시작
- 여러단어가 있으면 다음 단어의 첫글자를 대문자로.
- 이름 지을 때 주로 동사로 많이 지음. 
  (이유 : 메소드 자체가 기능과 관련됨. 그래서 어떤 기능을 하는지 나타내기 위해)
- 메소드 이름과 변수 이름은 같을 수 있다. 
  (메소드 이름뒤엔 괄호가 붙기때문에 구별 가능)


4. 메소드 이름 앞? [return type]
- return type을 나타냄. 
- void
  : 없음을 뜻함.
  : return값이 없게 됨. 그래서 아무것도 반환할 수 없음. (return 찍었을 때)
  : 그래서 내가 뭔가 값을 return하고자 한다면 절대 void 안에서는 못 씀.
    -> 이때는 내가 반환하고자 하는 타입으로 바꿔주면 됨.
       eg. int, double, 등...

eg.
  public static int sum() {  
	int a = 10;
	int b = 20;
	int sum = a + b;
		
	return sum;	<< return이 있어야 함. 없으면 컴파일 에러.
  }


5. 파라미터 (메소드 뒤 괄호 안)
- 메소드의 입력 부분
- 통로와 비슷한 개념 : 입력값이 들어오는 입구
- 주의사항
  : 메소드 호출 시 파라미터 형식을 똑같이 맞춰서 입력해야 함!
  : 파라미터는 지역변수!
- 호출할 때 형식을 완벽하게 지켜줘야함.
  : 개수(입력값 개수), 타입, 순서(첫번째 넣은 게 첫 번째에 들어가고...)

5.1 파라미터 약속
- 파라미터는 박스 하나를 마련해둘께. 여기에 값을 집어넣어줘. 라는 약속이다.
- Call By Value 
  : 메소드를 호출할 때는 변수를 넣어도 변수값만 복사되어 전달된다.
    고로 변화된 값은 메소드 안에서만 존재하게 되어 내가 원하는 값을 낼 수 없다.
- 원하는 값을 만들려면 리턴밸류를 만들어 주면 된다.
  : eg. return a;


6. 리턴
- 리턴값은 하나만. 두 개 이상은 안 됨.
  나중에 참조형 변수 배우면 그때 여러 개 호출 가능함.


7. 예제
숫자 하나가 짝수, 홀수인지 알고 싶음. 이 기능을 할 수 있는 메소드.
	
 리턴타입:논리값 이름:짝수냐? (정수, 1개)
1. boolean isEven(long) -> 짝수냐? 물어봤을 때-> 짝수면 true, 홀수면 false
2. int isEven(int) -> 짝수냐? -> (내가 마음대로 정할 수 있음) 
3. char isEven(int) -> 짝수냐? -> (내가 마음대로 정할 수 있음) 
	
4. void isEven(int) 
-> 보이드는 x
  : 단순 출력만 가능하고, 값을 메인으로 가져올 수 없음 (이유 : return값을 못 가져오니깐)
  : 어떠한 결과를 알려주고자 할 때 피해야 함.


8. String
- 얘는 값이 없지만, 메소드 호출시 얘가 가지고 있는 화살표가 복사가 되는 느낌.
eg.
  public static String concat(String left, String right) {
	return left + right;
  }
  public static void main(String[] args) {
	String h = "Hello";
	String w = "World";
	String result = concat(h, w);
  }
  : h와 w가 가진 화살표가 복사 되어 각각 left, right에게 감. 



