	5.17 - 자바 첫 수업

	#. 기초 이론
0.
작성 - 메모장
번역 - 컴파일 도구 << 컴파일러
실행 - 실행 환경 << Runtime Enviroments


1.
JVM (Java Virtual Machine)
: 작성한 코드를 번역해주게 되면 그 동작들을 읽어서 각 컴퓨터 환경에 맞게끔 실행을 시켜주는 역할.
  똑같은 프로그램을 여러번 작성할 필요 없게함.
: 자바의 장점


2. 개발도구
- GUI 
: 그래픽 인터페이스를 통해서 개발하는 것. (자바에도 있음)

- CLI (Command Line Interface)
: 한 줄씩 명령어 문장을 입력해서 개발하는 것.
: eg. 윈도우에서 검색창에 cmd 
: java개발시 더 많이 사용할 것임.


	#. cmd 사용
1. javac 불러오기
1) cmd에서 직접 경로 설정하기 
   (이 방법의 단점 : 경로를 일일이 설정해야 됨)
- cd.. : 한 단계 위로 올라감(경로) -> C드라이버까지 
- cd ~~ : ~~ 경로로 감
- cd\ : 제일 위로
- dir : 현재 경로에 있는 폴더 목록 나타냄

1-2) (꿀팁★) 탐색기에서 원하는 주소 들어감 -> 주소창에 cmd 엔터  -> 하면 바로 뜸.

2) 윈도우 환경에서 바로 그 경로로 갈 수 있게 설정할 수 잇음.
   윈도우검색창 : 시스템 환경변수 
-> 환경변수 클릭 -> 새로만들기 
-> 변수이름 : JAVA_HOME,  변수값 : C:\Program Files\Java\jdk1.8.0_202 (디렉터리로 찾아보기)
-> 시스템 변수 목록 중 Path 찾기
-> 편집 -> 새로만들기 -> %JAVA_HOME%\bin
-> 이제 cmd에서 javac 입력하면 바로 사용가능함


2. 기타 cmd 명령어
- d:    << d드라이버로 시작
- mkdir ~~    << 뒤의 이름을 가진 폴더 만들기
- notepad Hello.java    << 메모장으로 자바 파일 만들기


3. 메모장
- 폰트 : consolas (문자 구분 잘됨)


4. 작업 진행 순서
1) 메모장에 코드 작성
2) cmd로 번역.	D:\Royb>javac Hello.java
3) 클래스 파일이 해당폴더에 생성됨.
4) 실행   	D:\Royb>java Hello
	  (결과) hello World


	#. Java

1. 프로그래밍 언어가 다양한 이유
- 목적이 다 다르기 때문.

- 언어마다 번역하는 방식이 다른데, java는 컴파일 언어라 한다.
: 소크코드 -> 번역(컴파일) -> 실행
: 장점은 실행할 때 번역하는 과정이 빠져있기에 빠르게 실행 가능
  단점은 번역을 위해서 문법을 아주 명확하게 작성해야 함.

- 인터프린터, 스크립터
: 소스코드를 바로 실행 -> 문장을 그때 그때 바로 번역함.
: 장점은 조금 더 유연하게 작성가능
  단점은 실행시 좀 더 느림.


2. 객체 단위 : class
- 클래스는 이름을 직접 설정할 수 있다. (임의로)
  : 특징 - 영문, 첫글자가 대문자
- 클래스명과 파일이름은 똑같이!

3. { } 
- 클래스의 범위 영역


4. 주석
  1) 범위 주석 : /*    */
  2) 한줄 주석 : // 


5. 메인 메소드
- 작성한 프로그램의 시작점이 된다.
eg. 
    public static void main(String[] args) {  
        System.out.println("Hello World");
    }


6. 출력
- 내가 원하는 문자를 내보내는 것
- 출력 명령어 
  : System.out.println( );
- "" 
  : 안에 기입한 것 = 문자열 (String)


7. 문장 (Statement)
- 무언가를 동작하게끔 하는 것.
- 문장의 끝은 ;


8. 절차수행
- 절차대로 프로그램이 진행되는 것
eg.
	System.out.println("Hello World"); // 문장
	System.out.println("12345");
	System.out.println("010-5039-5692");
-> 결과
Hello World
12345
010-5039-5692


9. 자바 한글로 나오게 하기
- '-encoding UTF-8'를 추가 입력해주면 됨
eg.
   javac -encoding UTF-8 PrintName.java


10. 숫자와 문자
- 차이는 연산!
  "22" = 문자 / 22 = 정수 / 22.22 = 실수
  문자는 연산이 안 됨.
eg. 
    "10 + 10" -> 10 + 10
   "10" + "10" -> 1010
     20 + "10" -> 2010    : 숫자에 문자를 더하면 문자열이 됨.
---------------------------------
    10 + 10 -> 20
    0.1 + 0.1 -> 0.2

- 스페이스도 문자로 취급함.
eg.
    10 + " 10" -> 10 10
    10 + " " + "10" -> 10 10


11. 줄 띄우는 법
1) System.out.println();
2) 백슬러시(\)n
eg.
System.out.print("1 2 3\n4 5 6")    
-> 1 2 3
   4 5 6



12. 출력 방법
- println : 한줄씩 출력함. 
- print : 줄띄움 발생하지 않고 계속 이어서 출력
eg.
        System.out.print(1);
        System.out.print(2);
        System.out.print(3);
-> 123


13. 메소드 (Method)
- 일명 "명령어"
eg.
main, println, print, 등...

- 메소드 호출(Method Call) 
: 다양한 명령어드를 활용해서 결과값을 출력시키는 것을 뜻함.
eg. System.out.println(~~);


14. 변수 선언 (Variable declare)
- int : 정수형 data type (자료형)
eg.
        int x;
        int y;
        int sum;

- 초기화(initialinze) 
: 변수에 제일 처음 값을 넣어주는 것을 뜻함.
: 변수를 사용할 때는 꼭 초기화 과정을 해줘야 함.

- 변수 이름 짓기
: 영소문자로 시작
: 대소문자를 각각 구별함
: 영어 뒤에 숫자도 올 수 있음
: 공백은 포함할 수 없음
eg. book title -> bookTitle (대문자로 구별해줌)
: 특수문자 불가능 (예외: -, _ 만 가능)
: 똑같은 이름의 변수를 만들 수는 없음 (중복x)


15. 대입연산자 (=)
: 오른쪽 값을 왼쪽에 집어 넣음.
: 주의 -> '같다'는 뜻 아님!!!


16. return;  
: 메소드를 종료시킴. 생략해도 됨. 
: 리턴 아래쪽에 문장 적으면 안 됨.(에러 뜸)


17. 연산자 순서
: +, * 중 *가 먼저 (수학이랑 똑같음)
eg.
"10 곱하기 5는 " + 10 * 5

: 순서 안 헷갈리게 하려면 괄호 이용
eg.
"10 곱하기 5는 " + (10 * 5)


18. 나누기
: 그냥 정수로 나누면 소숫점자리는 생략함. (정수로 인식해서...)
: 소숫점 나타내려면 
System.out.println("22 나누기 4는 " + (22.0 / 4.0)); -> 소숫점까지 표기하기


19. 문자와 연산자
: +만 가능
: 나머지 (-, /, *) 다 불가능. 에러뜸.


20. 연산자 주의사항
: 예외적인 상황을 만나면 프로그램이 종료됨.
eg.
System.out.println(50 / 0);    -> 컴파일은 되나, 자바 실행시 오류로 프로그램 종료됨.

