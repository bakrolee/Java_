22.05.20 금

	#.

1. 문자
1) '\t' = tab키 누른 것처럼 일정 공간 띄워짐.

2)  '', "", \
- 일반적으로 짝을 지어서 사용해야 함.
- 홀로 사용하려면 \' or \" or \\로 사용하면 됨. 그럼 한 개의 문자로 취급해줌.


2. Not 연산자 : !
eg.
   boolean t = true;
   t = !t;
   -> 결과는 false


3. 자료형의 확장 (자동으로 일어남)
- 예제
   byte b = 10;
   short s = 100;
   ? sum = b + s;
byte, short는 연산을 하려고 하면 int를 따라가려고 하기 때문에
byte와 short 타입으로 사용하려면 컴파일 에러가 뜸.


4. 형변환 (주로 축소할 때 씀)
- 작은 타입을 큰 타입에 담는 건 괜찮. 에러 가능성 nope.
- 큰 수를 작은 박스에 답는 건 에러 가능성 높으므로 컴파일러에서 에러 표기뜸.
  이때 에러 감안하고 강제로 원하는 타입 쓰는 것이 형변환.
eg. 
  int i = (int) 1000L;
eg.
  double d = 123.456;
  int i = (int) d;



	#. String  문자열 (= 문장)
- 특징 
 : 기초형이 아닌 참조형
 : 기초형과 차이점은 대문자로 시작함. (기초형은 소문자)
   첫 문자가 대문자인 이유는 class를 불러오기 때문.
 : 변수 선언은 똑같음.
   Type name;  eg. String str;

- index
 : 선언된 문자에 인덱스가 붙음(0부터 시작).
eg.
  String hello = "Hello";
  char h = hello.charAt(0); -> 0번째 문자 하나만 불러옴 
  => (출력값) H

 : 스페이스바, \n, 등등 얘네도 하나의 인덱스 값을 가짐!
 : 인덱스는 항상 0부터 시작. (음수는 없음)


	<메소드 정리>

1) .charAt(?);
- index 불러오는 메소드 
eg. 
  char 이름 = 스트링 이름.charAt(?);


2) .length();
- 글자의 길이를 정수로 알려줌.
eg. 
  int 이름 = 스트링 이름.length();


3) .valueOf(?);
- 정수를 문자열로 바꿔줌
eg. 
  String strNum = String.valueOf(12345);
eg. 꼼수
  int i = 5055;
  String strNum2 = "" + i; // 꼼수
  System.out.println(strNum2.charAt(1));  -> 0 출력


4) .indexOf(?);
- 문자의 index순서를 찾기 위해서 사용
- 왼쪽부터 찾음
eg. 
  String hello = "hello";
  int index = hello.indexOf("o");
  System.out.println(index);

5) .lastIndexOf(?);
- 오른쪽에서부터 찾음
- 값은 index 값 (왼쪽부터 헤아린다)

6) .equals(?);
- 문자열 똑같은지 값을 비교해서 찾아줌. 
- 한번에 하나씩만 비교해줌.
- 문자열은 관계연산자 == 사용하면 값을 비교하지 않으므로 원하는 결과 도출 안나옴.

  
7) Scanner 사용할 때 -> .nextLine();



	#.
1. block
- { } 안의 범위를 통해 block을 표현함.
- 범위 안에 다른 범위가 존재가능.

1-1) 지역변수
- 중괄호 안에서만 사용가능한 변수
- 큰 범위 -> 작은 범위는 영향 미칠 수 있으나
  큰 범위 <- 작은 범위는 영향 미칠 수 없음. 


2. 제어문
- 제어하는 대상 : 흐름
- 목적 : 제어를 통해서 원하는 흐름을 만들어 냄.
- 비유
 : 평소에는 우산없이 나가는 일반적인 흐름으로 가다가 
   밖을 확인하고 비가 오니깐 우산을 들고간다는 행동이 추가 됨.

if ( 조건식(논리값) ) {  
프로그램이 if를 만나면 조건식을 검사하게 된다. 
조건식은 boolean식(true /false) 2개. 
'참'이면 중괄호 안의 문장들이 실행됨. 그리고 문장이 끝나면 다시 원래대로 돌아옴.
'거짓'이면 중괄호 안의 범위를 건너띄고 정상적인 흐름으로 흘러감.
}
eg.
  if (참) {	-> 참이면 문장1, 문장2 실행 후 문장3 실행
	문장1
	문장2
  }		-> 거짓이면 문장3으로 바로 실행
  문장3 


3. else if 

if (조건문) {

} else if (조건문) {

} else if (조건문) {

} else {
  마지막 else는 생략할 수도 있음. 대신 이 if절은 항상 실현되지 않을 수도 있음. 
  만약 위 조건문들이 다 거짓일 때.
}









