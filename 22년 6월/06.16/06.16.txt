06.16 목

	#. Comparator (인터페이스)
1. 의의
: 객체 여러개 만들어서 내가 원하는 만큼 기준을 두고 비교 가능.
: arrays.sort(배열, comparator 객체)


	#. 로컬 클래스
: 일회용 클래스 만들기 가능
: 로컬클래스는 일반적으로 다 가능함.


	#. 인터페이스
0. 추상클래스와 비교
- 인터페이스 : 추상적인 행동을 모아둔 타입. 
- 추상클래스 : 추상적인 행동, 필드, 생성자, 메소드 등등...을 다 가질 수 있음. (클래스이기 때문에)


1. 이름이 없는 임시 클래스 (Anonymous class)
eg.
  Comparator<Member> nameCom = new Comparator<Member>() {
	@Override
	public int compare(Member o1, Member o2) {
		return 0;
	}
  };
- nameCom : 이름이 없는 클래스를 참조하는 참조변수 (클래스 이름 아님) 
- 중괄호 부분(body)이 클래스.


eg. 
  class NameComparator implements Comparator<Member> {
	@Override
	public int compare(Member o1, Member o2) {
		return o1.getName().compareTo(o2.getName());
	}
  }
-> NameComparator n = new NameComparator();
-> Comparator c = n;
   이렇게 업케스팅 해서 쓰는 것과 똑같은데, 이름이 없으니깐 위의 형태를 취한 것.
 

2. 필드?
- 필드는 없음.
- 대신 public하며 static하며 final한 값을 표기 가능.

3. default 메소드
- 자식마다 무조건 override해줄 필요는 없음. 내가 원할때만 override해주면 됨.

4. static 메소드 가능.
- 객체가 아닌 정적인 기능이기 때문에, 그냥 위치를 인터페이스에 가져다 놓을 수 있다는 느낌. 
  (아니면 클래스 안에 작성하거나)

5. private한 메소드는 불가능.
- java 9버전부터는 근데 가능함...




















