	#.

1.String.format
- 우측의 모양대로 문자열을 만들어서, 스트링값을 반환하는 메소드

2. 필드 초기화
- 내가 하지 않아도 뭔가 이상한 값으로 초기화가 되고있다.
- 명시적으로 클래스 내부에다 대입연산을 해놓으면 그 값으로 초기화된다.

3. 기본 생성자
- 클래스이름();
- 필드 초기화 해주는데 기본값으로 초기화를 해준다. (위에 작성한 자동 필드 초기화)
- 기본값?
 정수형 : 0 (char도 0으로 초기화)
 실수형 : 0.0
 논리형 : false
 참조형 : null (eg. String)

4.생성자
- 내 의도에 맞게끔 그때 그때마다 초기화를 해줄 수 있는 생성자를 직접 만들 수 있다.
- 형식
 : 클래스와 똑같이 생김, 리턴타입 존재하지 않음
- 중괄호 안에 문장 입력
 : 커스터마이징한 필드 초기화를 위한 목적의 내용
 
- 주의
 : 파라미터의 타입, 순서, 개수를 꼭 확인해야 함

eg. 
public class Box {
	int width;
	int length;
	int height;
	
public Box(int w, int l, int h) { // 생성자 필드초기화
	width = w;
	length = l;
	height = h;
}
	
public static void main(String[] args) {
	Box b = new Box(4, 4, 4);  // 내가 원하는 값대로 초기화 됨.


5. 생성자는 중복 가능

6. this();
- 자기 자신의 생성자를 호출
- 만약 생성자가 여러 개일 경우 괄호 안 파라미터의 타입, 순서, 개수에 맞는 생성자를 부름.

7. 
참조 : 찾아가서 읽는다.(흐름 x)
호출 : 호출한 곳을 따라가서 흐름을 만들어 냄.(상호작용, 주고 받음)


8. private
- 외부에서는 접근할수도, 볼수도 없음.
- 자기 자신의 범위 안에서만 사용가능함.

- 내가 초기화한 값을 변경하고 보고싶을때 접근을 메소드의 형태로 제공할 수 있다! 
  (정보는 숨겨놓고, 알려달라고 할 때 행동을 통해 알려주거거나 변경해달라 할 때 변경)

9. 객체지향적 사고
- 메인에 다 논리의 흐름을 작성하면 번거로움
- 객체 스스로가 생각하고 판단할 수 있게 한다면 모든 논리 흐름을 생각할 필요가 없게됨.
 : 내가 직접 메인에서 값을 지정해주는 것을 막아버리고 (private를 이용)
 : 대신 값을 변경하거나, 알려주는 메소드를 제공해주는 것
 : 그렇다면 우리가 필요한 논리의 흐름을 메소드 안에 작성해두면 됨.

- 정보와 행동이 따로 떨어져있으면 파일을 관리하는 게 힘들어짐.
 : 수정을 할 때마다 고통이 수반됨
- 정보를 바꾸는 과정이 무조건 해당 객체 안에서 존재하기에 수월해짐
  따라서 정보와 그에 관련된 논리는 같은 곳에 작성하라


10. 필드 이름
- 값을 설정할 때는 set~~ (setter)
- 값을 알려줄 때는 get~~ (getter)

11. 
필드 이름과 
생성자, 메소드 파라미터 안의 이름은 같아도 된다.
그래서 
public class Dog{
  String name;

  publid Dog (String name){
  this.name = name;
  }

이렇게 쓰면 됨
왼쪽은 필드네임  / 오른쪽은 파라미터


12. setter/getter 응용
- setter를 만들지 않으면, 초기 설정 이후 값을 변경할 수 없음. 
- getter를 만들지 않으면, 값을 안 보여줄 수 있음.









