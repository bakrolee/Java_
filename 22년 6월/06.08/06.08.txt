06.08
	#. Arrays의 메소드

1. 배열 복사하기
- Arrays.copyOf(원본배열, 카피본 배열의 길이);
eg.
  int[] arr = {10, 20, 30};
  int[] copy = Arrays.copyOf(arr, 6); -> 길이 6을 가진 배열 카비됨. [10, 20, 30, 0, 0, 0]


2. 배열 같은지 비교
- Arrays.equals(배열1, 배열2);
 : 배열의 길이가 같고, 원소값이 같은지 비교 후 true/false로 나타냄.


	#. for each문
1. 형태
  for ( : ) {  }
- 콜론기준 오른쪽 = 여러 개를 담을 수 있는 객체가 온다. eg. 배열
- 왼쪽 = 타입과 이름

2. 사용법
: 한번 반복될 때마다 (오른쪽)배열 안에 있는 것을 순서대로 끄집어 냄.
  왼쪽에다 끄집어낸 값의 타입과 형태를 대입을 시킴.

3. 특징
- 처음부터 끝까지 값을 확인할 때만 사용.
- 방향을 바꾸거나, 보고싶은 원소들만 보는 것은 불가능.

4. 장점
- 인덱스에 대한 고민을 덜 수 있음.

5. 단점
- 처음부터 끝까지 순서대로만 출력가능.  
- 역순 불가. 2개씩 건너 뛴다던지, 원하는 순서만 출력하는 것 불가.

6. 주의사항
- 값을 보고자 할 때 잘 작동됨 (sysout!)
  배열의 객체를 생성 하는 건 불가능. (이유 : 오른쪽 배열의 값이 바뀌지 않고, 왼쪽의 참조만 바뀌기때문에, 오른쪽 배열의 원소값은 그대로임)
- 허나 인스턴스값을 바꾸는 건 가능함.

-> for each 문에서 (a : ???) 일때, { a = ??? }으로 사용하면 참조가 바뀌게 되서 내가 원하는대로 안 나옴.
-> for each 문에서 a.??? 으로 사용하면 참조는 그대로지만 인스턴스값은 바뀌기때문에 가능함.


	#.가변길이 파라미터 = '...'
0. 형태 
  (타입... 이름)
eg. (int... i)
  - 메소드 호출시 : 쉼표로 쓰면 됨.
    (4, 5, 6, 7, 8)

1. 의의
- 언제 쓰는가?
: 메소드 생성시 파라미터에서 사용.
: 메소드 호출시 여러개의 값을 파라미터에 입력할 때, 여러 개의 값을 하나의 이름으로 전달받고 싶을 때 사용.
  (파라미터 1개면 원래 메소드 호출할 때도 1개 값만 입력 가능. 여러 개 쓰려면 배열써야 함.)
  (...쓰면 여러개 값 입력해도 자동으로 배열생성해줌.)
: 파라미터라는 건 개수가 같아야 하는데 얘를 쓰면 여러값을 하나의 파라미터로 대체 가능하고, 또 따로 메소드에서 배열을 생성할 필요도 없음.


2. 예시
- []대신 ...을 쓸 수 있음.
eg.
  public static void someMethod(int... arr) - 파라미터
  ---메인 메소드---
  someMethod(new int[] { 4, 5, 6 }) - 메소드 호출하면 적용 됨.
  someMethod(40, 50, 60, 70, 80);  -> 이렇게 써도 배열로 만들어 줌.
  (이유) 얘가 원소로 만들 수 있는 배열을 만든다.


3. 규칙 (주의사항)
- 파라미터가 여러 개가 있을 때는 제일 뒤쪽에 위치해야한다.
eg.
  (double d, int i, int... j)










