06.10 금

	#. 정렬
1. bubble sort
- 토너먼트 붙이기

2. 자바는 퀵 정렬 사용
- Arrays.sort : 퀵소트인데 제자리 정렬일 때 최악의 경우 방지하도록 수정된 메소드.


3. 이진검색
- (선행조건) 먼저 정렬이 되어있는 상태에서
  -> 배열의 중간지점에서 조건값에 따라 좌 or 우 탐색

- 원소값이 겹치는 게 없어야 함.
  (원소값이 겹치는 것이 있으면 값을 하나밖에 전달을 못하기에 엉뚱한 값을 알려줌)
  -> 고로 중복되는 게 있는지 미리 찾아내야 함.


	#. Wrapper
1. 의의
: 원시 형태의 변수를 객체로 포장해주는 클래스

2. 사용법
: 앞에 소문자를 대문자로 바꿔주면 됨.
Byte b;  // 참조형 변수로 만들어 줌
Short
Int(x)  -> Integer (예외)
Long
Float
Double
Char(x)  -> Character (예외)
Boolean
: int, char는 길게 써야 됨.


	#.
3. boxing
: 원시형 타입을 객체의 형태로 바꾸는 과정을 뜻함.
eg. Integer i2 = Integer.valueOf(500);

3.1 auto boxing
: 자동으로 boxing이 일어나게 됨. (편리성을 위해)
eg. Integer auto = 100;


4. unboxing. 
: 다시 원시타입으로 알려줌.
eg. int primitiveInt = i2.intValue();

4.1 auto-unboixng
: 자동 언박싱
eg. int un = auto;


	#.
1. BigInteger
- 큰 정수 담을 수 있음.
- 산술연산자 직접 사용 안됨. 메소드 사용가능.
  -> 결과 값은 BigInteger 타입으로 받음. (숫자는 아니지만... 숫자처럼 사용은 가능)

2. BigDecimal
- 긴 소수 담을 수 있음.


	#. 이차원 배열 (cf. 표)
1. 형태
  int[][] arr;
- 앞[] : 행, 줄 (배열의 개수)
- 뒤[] : 열 (배열의 길이)


2. 목적
- 배열을 여러 개를 담을 수 있는 배열을 만들기 위함.
- 다만, 같은 길이값을 가지는 배열들만 담을 수 있음.
eg.
  1번째 배열 길이 = 5, 2번째 줄은 7개 등... 이런 건 Nope!!!


3. 특이사항
- arr2d.length만 입력하면 줄의 수를 알려줌.
- 배열의 길이를 알고 싶을 때(열)는 
  -> arr2d[0].length; = 0번째 줄의 배열 길이.

4. deep~
- Arrays.deepToString()
  : 이차원 배열 원소값 보여줌 (주소값 말고)
- Arrays.deepEquals(a, a2)
  : 이차원 배열간 동등한지 비교 가능


	#.Method Overloading
1. 의문
- system.out.print() -> 파라미터 타입을 다양하게 받을 수 있는데, 어떻게 다양하게 대응할 수 있는가?

2. 메소드 이름은 같아도 된다.
- 메소드 구분법 : 이름, 파라미터(타입, 순서, 개수) 다 따져서 다르면 다른 메소드!








